/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as SettingsLayoutRouteRouteImport } from './routes/_settingsLayout/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsPasswordRouteImport } from './routes/settings_/password'
import { Route as SettingsLayoutProfileRouteImport } from './routes/_settingsLayout/profile'
import { Route as SettingsLayoutPaymentRouteImport } from './routes/_settingsLayout/payment'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLayoutRouteRoute = SettingsLayoutRouteRouteImport.update({
  id: '/_settingsLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsPasswordRoute = SettingsPasswordRouteImport.update({
  id: '/settings_/password',
  path: '/settings/password',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLayoutProfileRoute = SettingsLayoutProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => SettingsLayoutRouteRoute,
} as any)
const SettingsLayoutPaymentRoute = SettingsLayoutPaymentRouteImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => SettingsLayoutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/payment': typeof SettingsLayoutPaymentRoute
  '/profile': typeof SettingsLayoutProfileRoute
  '/settings/password': typeof SettingsPasswordRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/payment': typeof SettingsLayoutPaymentRoute
  '/profile': typeof SettingsLayoutProfileRoute
  '/settings/password': typeof SettingsPasswordRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_settingsLayout': typeof SettingsLayoutRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/_settingsLayout/payment': typeof SettingsLayoutPaymentRoute
  '/_settingsLayout/profile': typeof SettingsLayoutProfileRoute
  '/settings_/password': typeof SettingsPasswordRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/payment' | '/profile' | '/settings/password'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/payment' | '/profile' | '/settings/password'
  id:
    | '__root__'
    | '/'
    | '/_settingsLayout'
    | '/about'
    | '/_settingsLayout/payment'
    | '/_settingsLayout/profile'
    | '/settings_/password'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsLayoutRouteRoute: typeof SettingsLayoutRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  SettingsPasswordRoute: typeof SettingsPasswordRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_settingsLayout': {
      id: '/_settingsLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SettingsLayoutRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings_/password': {
      id: '/settings_/password'
      path: '/settings/password'
      fullPath: '/settings/password'
      preLoaderRoute: typeof SettingsPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_settingsLayout/profile': {
      id: '/_settingsLayout/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof SettingsLayoutProfileRouteImport
      parentRoute: typeof SettingsLayoutRouteRoute
    }
    '/_settingsLayout/payment': {
      id: '/_settingsLayout/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof SettingsLayoutPaymentRouteImport
      parentRoute: typeof SettingsLayoutRouteRoute
    }
  }
}

interface SettingsLayoutRouteRouteChildren {
  SettingsLayoutPaymentRoute: typeof SettingsLayoutPaymentRoute
  SettingsLayoutProfileRoute: typeof SettingsLayoutProfileRoute
}

const SettingsLayoutRouteRouteChildren: SettingsLayoutRouteRouteChildren = {
  SettingsLayoutPaymentRoute: SettingsLayoutPaymentRoute,
  SettingsLayoutProfileRoute: SettingsLayoutProfileRoute,
}

const SettingsLayoutRouteRouteWithChildren =
  SettingsLayoutRouteRoute._addFileChildren(SettingsLayoutRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsLayoutRouteRoute: SettingsLayoutRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  SettingsPasswordRoute: SettingsPasswordRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
